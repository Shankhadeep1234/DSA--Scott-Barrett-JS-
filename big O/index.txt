Big O notation is a mathematical notation that describes the limiting behavior of a function 
when the argument tends towards a particular value or infinity. In computer science, 
it is commonly used to describe the performance or complexity of an algorithm. 
It is used to classify algorithms according to how their run time or space requirements 
grow as the input size grows. The notation is expressed as O(f(n)), where f(n) is a function that describes 
the growth rate of the algorithm's time or space complexity as the input size n grows.
-------------------------------------------------------------------------------------------------------------
Big O notation characterizes functions according to their growth rates:
different functions with the same growth rate may be represented using the same O notation. 
The letter O is used because the growth rate of a function is also referred to as the order of the function.
A description of a function in terms of big O notation usually only provides an upper bound on the growth rate of the function.
Associated with big O notation are several related notations, using the symbols o, Ω, ω, and Θ, to describe other kinds 
of bounds on asymptotic growth rates.

best case scenario: O(1) with a greek letter omega -Ω
average case scenario: O(n) with a greek letter theta -Θ
worst case scenario: O(n^2) with a greek letter big O -o

**Note - when we say O(n) we mean the worst case scenario.**